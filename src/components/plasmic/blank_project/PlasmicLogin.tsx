// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eefQAUWxZbPSHn3rmeQcFz
// Component: eVx4kC_2No
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Checkbox from "../../Checkbox"; // plasmic-import: om2k4TuN64y/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: eefQAUWxZbPSHn3rmeQcFz/projectcss
import * as sty from "./PlasmicLogin.module.css"; // plasmic-import: eVx4kC_2No/css

export type PlasmicLogin__VariantMembers = {};

export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: p.Flex<"div">;
  usernameInput?: p.Flex<"input">;
  passwordInput?: p.Flex<"input">;
  checkbox?: p.Flex<typeof Checkbox>;
  loginButton?: p.Flex<"button">;
};

export interface DefaultLoginProps {
  className?: string;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  dataFetches?: PlasmicLogin__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__cbD
            )}
          >
            {"Log in to Letmein!"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__u1X4K
            )}
          >
            {"Login with the data you entered during\nyour registration. "}
          </div>

          {true ? (
            <input
              data-plasmic-name={"usernameInput"}
              data-plasmic-override={overrides.usernameInput}
              className={classNames(defaultcss.input, sty.usernameInput)}
              disabled={false}
              placeholder={"@username" as const}
              size={1 as const}
              type={"text" as const}
              value={"@username" as const}
            />
          ) : null}

          <input
            data-plasmic-name={"passwordInput"}
            data-plasmic-override={overrides.passwordInput}
            className={classNames(defaultcss.input, sty.passwordInput)}
            placeholder={"Password" as const}
            size={1 as const}
            type={"password" as const}
            value={"Some value" as const}
          />

          <Checkbox
            data-plasmic-name={"checkbox"}
            data-plasmic-override={overrides.checkbox}
            className={classNames("__wab_instance", sty.checkbox)}
          >
            {"Remember me"}
          </Checkbox>

          <button
            data-plasmic-name={"loginButton"}
            data-plasmic-override={overrides.loginButton}
            className={classNames(
              defaultcss.button,
              defaultcss.__wab_text,
              sty.loginButton
            )}
            disabled={false}
          >
            {"Login"}
          </button>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__kj3Cx
            )}
          >
            {"Don't have an account? "}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__mgDt
            )}
          >
            {"Register here!"}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "usernameInput", "passwordInput", "checkbox", "loginButton"],
  usernameInput: ["usernameInput"],
  passwordInput: ["passwordInput"],
  checkbox: ["checkbox"],
  loginButton: ["loginButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  usernameInput: "input";
  passwordInput: "input";
  checkbox: typeof Checkbox;
  loginButton: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLogin__Fetches;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogin__ArgProps,
      internalVariantPropNames: PlasmicLogin__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    usernameInput: makeNodeComponent("usernameInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    checkbox: makeNodeComponent("checkbox"),
    loginButton: makeNodeComponent("loginButton"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
